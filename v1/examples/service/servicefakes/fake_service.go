// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"sync"

	"github.com/sachsry/mockhttp/v1/examples/service"
)

type FakeService struct {
	UpdateProfileStub        func(string) error
	updateProfileMutex       sync.RWMutex
	updateProfileArgsForCall []struct {
		arg1 string
	}
	updateProfileReturns struct {
		result1 error
	}
	updateProfileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeService) UpdateProfile(arg1 string) error {
	fake.updateProfileMutex.Lock()
	ret, specificReturn := fake.updateProfileReturnsOnCall[len(fake.updateProfileArgsForCall)]
	fake.updateProfileArgsForCall = append(fake.updateProfileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.UpdateProfileStub
	fakeReturns := fake.updateProfileReturns
	fake.recordInvocation("UpdateProfile", []interface{}{arg1})
	fake.updateProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeService) UpdateProfileCallCount() int {
	fake.updateProfileMutex.RLock()
	defer fake.updateProfileMutex.RUnlock()
	return len(fake.updateProfileArgsForCall)
}

func (fake *FakeService) UpdateProfileCalls(stub func(string) error) {
	fake.updateProfileMutex.Lock()
	defer fake.updateProfileMutex.Unlock()
	fake.UpdateProfileStub = stub
}

func (fake *FakeService) UpdateProfileArgsForCall(i int) string {
	fake.updateProfileMutex.RLock()
	defer fake.updateProfileMutex.RUnlock()
	argsForCall := fake.updateProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeService) UpdateProfileReturns(result1 error) {
	fake.updateProfileMutex.Lock()
	defer fake.updateProfileMutex.Unlock()
	fake.UpdateProfileStub = nil
	fake.updateProfileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) UpdateProfileReturnsOnCall(i int, result1 error) {
	fake.updateProfileMutex.Lock()
	defer fake.updateProfileMutex.Unlock()
	fake.UpdateProfileStub = nil
	if fake.updateProfileReturnsOnCall == nil {
		fake.updateProfileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateProfileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateProfileMutex.RLock()
	defer fake.updateProfileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.Service = new(FakeService)
